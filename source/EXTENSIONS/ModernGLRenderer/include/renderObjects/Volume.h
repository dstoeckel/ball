#ifndef VOLUME_H
#define VOLUME_H

#include <Eigen/Geometry>
#include <BALL/MATHS/vector3.h>
#include <renderObjects/RenderObject.h>

#include <ShaderManager.h>
#include <vbo/VBOQuad.h>

#include <BALL/DATATYPE/regularData3D.h>
#include <BALL/VIEW/DATATYPE/colorMap.h>
#include <BALL/VIEW/PRIMITIVES/gridVisualisation.h>

#include <list>
using std::list;

class Volume
	: public RenderObject
{
		Q_OBJECT
	public:
		EIGEN_MAKE_ALIGNED_OPERATOR_NEW

		/**
		 * @brief Default constructor
		 * The renderer needs to be initialized before usage by calling setup().
		 *
		 * @param camera The camera of the renderer.
		 *
		 **/
		Volume(Camera* camera);

		void prepare_rendering();

		/**
		 * @brief Starting point for rendering.
		 * This method should be called whenever the window needs to be redrawn. It starts the rendering
		 * process for the volume.
		 * The imposter_volume shader program is used.
		 *
		 * @return void
		 **/
		void render(RenderLevel level = OPAQUE);

		/**
		 * @brief Setup the render targets.
		 *
		 * The textures for backface color and position are setup (2D textures).
		 *
		 * The textures are attached to the framebuffer. If an error occurs during the attachment an
		 * error message is printed.
		 *
		 * The binding of the  framebuffer is broken.
		 *
		 * @param w The width of the current render context.
		 * @param h The height of the current render context.
		 * @return void
		 **/
		void setupRenderTargets(unsigned int w, unsigned int h);

		/**
		 * @brief Returns the volume texture id.
		 *
		 * @return GLuint
		 **/

		GLuint getVolumeTexture();

		/**
		 * @brief Sets the depth texture id.
		 *
		 * The texture should contain the depth values of the opaque objects.
		 *
		 * @param depth_texture The depth texture to be set.
		 * @return void
		 **/
		void setDepthTexture(GLuint depth_texture);

		/**
		 * @brief Sets the normal texture id.
		 *
		 * The texture should contain the normals of the opaque objects.
		 *
		 * @param normal_texture The normal texture to be set.
		 * @return void
		 **/
		void setNormalTexture(GLuint normal_texture);

	public slots:

		virtual void setViewport(unsigned int w, unsigned int h, unsigned int x=0, unsigned int y=0 );

		/**
		 * @brief Set the stepsize.
		 *
		 * The smaller the value, the better the volume representation (but the slow the the computation).
		 *
		 * @param stepsize The stepsize to be set.
		 * @return void
		 **/
		virtual void setStepsize(float stepsize);

	protected:

		virtual void register_();

		virtual void unregister_();

		virtual void compileShaderPrograms_();

		virtual void initShaderPrograms_();

	private:

		/**
		 * @brief Initializes the system.
		 *
		 * Only initializes the system when the initialized_ flag is not already set to true.
		 * It performs the OpenGL generation calls for nedded buffers (vertex and index buffer objects).
		 * The initialized_ flag is set to true.
		 *
		 * @return void
		 **/
		void initialize_();

		/**
		 * @brief Performs an cleanup.
		 *
		 * Delets buffers.
		 * After calling cleanup_() the initialized_ flag is set to false.
		 *
		 * @return void
		 **/
		void cleanup_();

		/**
		 * @brief Render the backface of the volume.
		 *
		 * Store the backface color and position of the cube in a texture for later usage.
		 *
		 * @return void
		 **/
		void renderBackface_();

		/**
		 * @brief Render the volume to the final texture.
		 *
		 * Use the backface color and position, as well as the depth and normal of the opaque objects to
		 * render the volume texture.
		 *
		 * @return void
		 **/
		void raycastingPass_();

		void createTextureFromGrid_(const BALL::VIEW::GridVisualisation* vis);

		virtual void initVBO_ ( std::list< const BALL::VIEW::GeometricObject* >& list );

		/**
		 * @brief Location of the 3D volume texture to be rendered.
		 **/
		GLuint volume_texture_;

		/**
		 * @brief Location of the backface color texture.
		 **/
		GLuint backface_color_;

		/**
		 * @brief Location of the backface position texture.
		 **/
		GLuint backface_pos_;

		/**
		 * @brief Location of the final image texture.
		 **/
		GLuint final_image_;

		/**
		 * @brief Shader name of the shader for the final volum rendering pass.
		 **/
		const char* shader_name_final_image_;

		/**
		 * @brief Framebuffer object names (ID) generated by glGenFramebuffers().
		 **/
		GLuint rendertarget_fboid_;

		/**
		 * @brief Sets up the volume.
		 *
		 * The volume will be centered a (0,0,0). Use the Model matrix to translate it.
		 *
		 * @param dim_x Widht of the volume.
		 * @param dim_y Height of the volume.
		 * @param dim_z Depth of the volume.
		 * @return void
		 **/
		void setupVolume_(float dim_x, float dim_y, float dim_z);

		/**
		 * @brief Location of the uniform variable "view_matrix" for the volumes used by a shader program.
		 *
		 * Needed to pass data to the shader program.
		 **/
		GLuint view_matrix_backface_idx;

		/**
		 * @brief Location of the uniform variable "projection_matrix" for the volume used by a shader program.
		 *
		 * Needed to pass data to the shader program.
		 **/
		GLuint projection_matrix_backface_idx;

		/**
		 * @brief Location of the uniform variable "vertex_position" for the volume used by a shader program.
		 *
		 * Needed to change data of the vertex attribut array.
		 **/
		GLuint vertex_position_idx;

		/**
		 * @brief Location of the uniform variable "color" for the volume used by a shader program.
		 *
		 * Needed to change data of the color attribut array.
		 **/
		GLuint color_idx;

		/**
		 * @brief Location of the uniform variable "clipping_planes" for the volume used by a shader program.
		 *
		 * Needed to update the clipping planes of the volume.
		 **/
		GLuint clipping_planes_idx;

		/**
		 * @brief Location of the uniform variable "clip_range" for the volume used by a shader program.
		 *
		 * Needed to update the clip range of the volume.
		 **/
		GLuint clip_range_backface_idx;

		/**
		 * @brief Location of the uniform variable "clip_range" for the volume used by a shader program.
		 *
		 * Needed to update the clip range of the volume.
		 **/
		GLuint clip_range_volume_idx;

		/**
		 * @brief Location of the uniform variable "used_clipping_planes" for the volume used by a shader program.
		 *
		 * Needed to update the number of clipping planes used of the volume.
		 **/
		GLuint used_clipping_planes_idx;

		/**
		 * @brief Location of the normal texture.
		 **/
		GLuint normal_texture_;

		/**
		 * @brief Location of the depth texture.
		 **/
		GLuint depth_texture_;

		/**
		  * @brief Vertex* Buffer Object for quads.
		  **/
		VBOQuad vbo;

};

#endif //VOLUME_H
