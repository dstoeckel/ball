#ifndef SSAO_H
#define SSAO_H


#include <Eigen/Geometry>

#include <BALL/MATHS/vector3.h>
#include <ShaderManager.h>
#include <renderObjects/RenderObject.h>
#include <vbo/VBOQuad.h>

struct SSAOParameters
{
	bool useAO;
	float sample_radius;
	float intensity;
	float scale;
	float bias;
	float downsampling;
};

class SSAO
	: public RenderObject
{
		Q_OBJECT
	public:
		EIGEN_MAKE_ALIGNED_OPERATOR_NEW

		/**
		 * @brief Default constructor
		 * The renderer needs to be initialized before usage by calling setup().
		 *
		 * @param camera The camera of the renderer.
		 *
		 **/
		SSAO(Camera* camera);

		/**
		 * @brief Destructor
		 *
		 * Calls the cleanup_ method to delete buffers.
		 * After calling the destructor the initialized_ flag is set to false.
		 *
		 **/
		~SSAO();

		void prepare_rendering();

		/**
		 * @brief Starting point for rendering.
		 * This method should be called whenever the window needs to be redrawn. It starts the rendering
		 * process for the spheres.
		 * The compositing shader program is used.
		 *
		 * @return void
		 **/
		void render(RenderLevel level = OPAQUE);

		/**
		 * @brief Render the given system.
		 *
		 * Perfomes an cleanup and calles the initialize methode.
		 * Sets up the compositing and shader program.
		 *
		 * @return void
		 **/
		void init();

		/**
		 * @brief Setup the render targets.
		 *
		 * The textures for diffuse and specular color, the normal texture and the depth texture are
		 * setup (2D textures). All textures use RGBA and linear interpolation.
		 *
		 * The renderbuffer for the z-test is setup.
		 *
		 * The textures are attached to the framebuffer. If an error occurs during the attachment an
		 * error message is printed.
		 *
		 * The diffuse, specular, normal, and depth texture are used for drawing. The binding of the
		 * framebuffer is broken.
		 *
		 * @param w The width of the current render context.
		 * @param h The height of the current render context.
		 * @return void
		 **/
		void setupRenderTargets(unsigned int w, unsigned int h);

		GLuint getSSAOTexture();

		void setDepthTexture(GLuint depth_texture);

		void setNormalTexture(GLuint normal_texture);

		/**
		 * @brief  The default SSAO parameters.
		 **/
		SSAOParameters defaultSSAOParameters;


	public slots:

		virtual void setViewport(unsigned int w, unsigned int h, unsigned int x=0, unsigned int y=0 );

		/**
		 * @brief Set the SSAO parameters.
		 *
		 * Sets the uniforms containing the SSAO parameters.
		 *
		 * @param ssaoParameters The SSAO parameters to be set.
		 * @return void
		 **/
		virtual void setSSAOParameters(SSAOParameters ssaoParameters);

	protected:

		virtual void register_();

		virtual void unregister_();

		virtual void compileShaderPrograms_();

		virtual void initShaderPrograms_();

		void setupTextures_();

		/**
		 * @brief Initializes the system.
		 *
		 * Only initializes the system when the initialized_ flag is not already set to true.
		 * It performs the OpenGL generation calls for nedded buffers (vertex and index buffer objects).
		 * The initialized_ flag is set to true.
		 *
		 * @return void
		 **/
		void initialize_();

		/**
		 * @brief Performs an cleanup.
		 *
		 * Delets buffers.
		 * After calling cleanup_() the initialized_ flag is set to false.
		 *
		 * @return void
		 **/
		void cleanup_();

		/**
		 * @brief Set the uniforms.
		 *
		 * Set the uniforms for the textures (noise, normal, depth, etc.). Additionally it sets the
		 * default parameters for SSAO.
		 *
		 * @return void
		 **/
		void setSSAOUniforms();

		/**
		 * @brief Sets up the compositing.
		 *
		 * @return void
		 **/
		void initVBO_();

		virtual void initVBO_ ( std::list< const BALL::VIEW::GeometricObject* >& /*list*/ ) { };

		/**
		 * @brief Texture name of the ssao texture generated by glGenTextures().
		 *
		 **/
		GLuint ssao_texture_;

		/**
		 * @brief Framebuffer object names (ID) generated by glGenFramebuffers().
		 **/
		GLuint rendertarget_fboid_;

		/**
		 * @brief Location of the uniform variable "quad_position" for the composite surface used by a shader program.
		 *
		 * Needed to pass data to the shader program.
		 **/
		GLuint position_idx;

		/**
		 * @brief Location of the uniform variable "quad_texcoord" for the composite surface used by a shader program.
		 *
		 * Needed to pass data to the shader program.
		 **/
		GLuint texcoord_idx;

		/**
		 * @brief Stores the texture id for the noise texture.
		 *
		 * Texture id created from bindTexture(). Can be used for glBindTexture() calls.
		 *
		 **/
		GLuint noise_texture_;

		/**
		 * @brief Location of the normal texture.
		 **/
		GLuint normal_texture_;

		/**
		 * @brief Location of the depth texture.
		 **/
		GLuint depth_texture_;

		/**
		 * @brief Vertex Buffer Object for full screen quads.
		 **/
		VBOQuad vbo;

};

#endif //SSAO_H